#!/usr/bin/env ruby

require 'thor'
require 'pathname'

class Reset < Thor
  desc 'reset docker', ''
  def docker
    System.run 'docker ps -aq | xargs docker stop && docker system prune -af --volumes'
  end

  desc 'reset xcode', ''
  def xcode
    System.run 'trash ~/Library/Caches/org.swift.swiftpm'
    System.run 'trash ~/Library/Developer/Xcode/DerivedData'
  end
end

module Update
  extend self

  def vim_plugins
    path = Pathname.new(File.expand_path('~/.vim/bundle')).join('*')
    entries = Dir.glob(path).delete_if { |entry| !File.directory?(entry) }

    entries.each do |entry|
      puts Pathname.new(entry).basename
      Dir.chdir(entry) { System.run 'git pull' }
    end
  end

  def tools
    path = File.expand_path('~/Sync/Code/tools')
    fail 'tools repo not found' if !Dir.exist?(path)

    Dir.chdir(path) { System.run('make') }
  end

  def brew
    [
      'brew update',
      'brew upgrade',
      'brew upgrade --cask',
      'brew cleanup -sv --prune 0'
    ].each { |command| System.run(command) }
  end
end

module System
  extend self

  def run(command)
    length = if command.include?("\n")
      command.split("\n").map(&:length).sort.last
    else
      command.length
    end

    puts '-' * length
    puts command
    puts '-' * length

    system(command)

    puts "\n"
  end
end

class LocalCLI < Thor
  register(Reset, 'reset', 'reset [COMMAND]', '')

  desc 'gpt', ''
  method_option :query, type: :string, required: false, aliases: '-q'
  method_option :context, type: :string, required: false, aliases: '-c'
  method_option :last, type: :boolean, required: false, aliases: '-l'
  def gpt
    query = options.query.to_s
    context = options.context.to_s
    command = "chatblade #{'-l' if options.last}".strip

    tmp_dir = File.expand_path('~/Docker/.tmp')
    cache_dir = File.expand_path('~/Docker/.cache/gpt-cli')

    FileUtils.mkdir_p(tmp_dir)
    FileUtils.mkdir_p(cache_dir)

    if context.empty? && query.empty?
      command << " -i"
    else
      command = "#{command} #{query.dump}"

      if !context.empty?
        fail 'context file does not exist' if !File.exist?(context)

        FileUtils.cp(context, "#{tmp_dir}/gpt-context")
        command << " < /root/gpt-context"
      end
    end

    command = <<~CMD
      docker run \\
      --rm -it --pull never \\
      -v '#{cache_dir}:/root/.cache/chatblade' \\
      #{ context.empty? ? '' : "-v '#{tmp_dir}/gpt-context:/root/gpt-context'" } \\
      gpt-cli \\
      -c #{command.dump}
    CMD

    System.run(command)
    FileUtils.rm_f("#{tmp_dir}/gpt-context")
  end

  desc 'update', ''
  def update
    Update.tools
    Update.vim_plugins
    Update.brew
  end

  desc 'conflicted', ''
  method_option :remove, type: :boolean, required: false, default: false, aliases: '-r'
  def conflicted
    if options.remove
      System.run('find ~/Sync -type f -name "* conflicted *" -exec rm -f {} \;')
    else
      System.run('find ~/Sync -type f -name "* conflicted *"')
    end
  end

  desc 'clean', ''
  method_option :all, type: :boolean, required: false, default: false, aliases: '-a'
  def clean
    commands = [
      'rm ~/.bash_history',
      'rm -rf ~/.local',
      'rm -rf ~/.bash_sessions',
      'rm -rf ~/.kube',
      'rm -rf ~/.cache',
      'rm -rf ~/.gem',
      'rm -rf ~/Docker/.tmp',
      'rm -rf ~/Docker/.cache',
      'rm ~/.zcompdump*',
      'rm ~/.tig_history',
      'rm ~/.pry_history',
      'rm ~/.irb-history',
      'rm ~/.node_repl_history',
      'rm ~/.guard_history',
      'rm ~/.lesshst',
      'rm ~/.sqlite_history',
      'rm ~/.psql_history',
      'rm ~/.mysql_history',
      'rm ~/.rediscli_history',
      'rm ~/.v8flags*',
      'rm -rf ~/.vim/_cache/*',
      'rm -rf ~/Library/Developer/Xcode/DerivedData',
      'rm -rf ~/Library/Application\ Support/Google/Chrome/Default/Local\ Storage/*',
      'rm -rf ~/Library/Application\ Support/Google/Chrome/Default/Favicons*',
      'rm -rf ~/Library/WebKit/LocalStorage/*',
      'rm -rf ~/Library/Safari/LocalStorage/*',
      'rm -rf ~/Library/Safari/Favicon\ Cache/*',
      'rm -rf ~/Library/Safari/Touch\ Icons\ Cache/*',
      'rm -rf /Users/josh/Library/Containers/com.apple.Safari/Data/Library/WebKit/WebsiteData/*'
    ].tap do |commands|
      if options.all
        commands << 'rm ~/.zsh_history'
        commands << 'rm /data/secrets/zsh_history'

        commands << 'rm ~/.viminfo'
        commands << 'rm /data/secrets/viminfo'

        commands << 'echo "" > ~/.z'
        commands << 'rm ~/.vim/_undo/*'
        commands << 'rm ~/.vim/_backup/*'
        commands << 'rm ~/.vim/_temp/*'
      end
    end

    commands.each { |command| System.run(command) }
  end
end

LocalCLI.start(ARGV)
